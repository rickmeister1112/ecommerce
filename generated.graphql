
type TaxSlab {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    tax_percentage (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    tax_id (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
}

input TaxSlabInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    tax_percentage : Float
    tax_id : Int
}

        extend type Query {
          getTaxSlab(id: UUID!): TaxSlab!
                  listTaxSlab(page: Int, limit: Int, order_by: [String]): [TaxSlab]!
        }
        extend type Mutation {
          addTaxSlab(row: TaxSlabInput!): TaxSlab!
          addMultipleTaxSlab(rows: [TaxSlabInput!]): [TaxSlab]!
          updateTaxSlab(id: UUID!, input: TaxSlabInput!): TaxSlab!
          deleteTaxSlab: TaxSlab!
        }
        
type Category {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    images (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    sub_categories (order_by: [String!]): [SubCategory]
    products (order_by: [String!]): [Product]
    categoryCoupons (order_by: [String!]): [CategoryCoupon]
}

input CategoryInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    name : String
    images : String
    sub_categories : [SubCategoryInput]
    products : [ProductInput]
    categoryCoupons : [CategoryCouponInput]
}

        extend type Query {
          getCategory(id: UUID!): Category!
                  listCategory(page: Int, limit: Int, order_by: [String]): [Category]!
        }
        extend type Mutation {
          addCategory(row: CategoryInput!): Category!
          addMultipleCategory(rows: [CategoryInput!]): [Category]!
          updateCategory(id: UUID!, input: CategoryInput!): Category!
          deleteCategory: Category!
        }
        
type SubCategory {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    sub_category_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    images (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    category: Category
    sub_categories (order_by: [String!]): [SSubCategory]
    products (order_by: [String!]): [Product]
    subCategoryCoupons (order_by: [String!]): [SubCategoryCoupon]
}

input SubCategoryInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    sub_category_name : String
    images : String
    category_id : UUID
    category : CategoryInput
    sub_categories : [SSubCategoryInput]
    products : [ProductInput]
    subCategoryCoupons : [SubCategoryCouponInput]
}

        extend type Query {
          getSubCategory(id: UUID!): SubCategory!
                  listSubCategory(page: Int, limit: Int, order_by: [String]): [SubCategory]!
        }
        extend type Mutation {
          addSubCategory(row: SubCategoryInput!): SubCategory!
          addMultipleSubCategory(rows: [SubCategoryInput!]): [SubCategory]!
          updateSubCategory(id: UUID!, input: SubCategoryInput!): SubCategory!
          deleteSubCategory: SubCategory!
        }
        
type SSubCategory {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    ssub_category_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    images (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    sub_category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    subCategory: SubCategory
    products (order_by: [String!]): [Product]
    subSubCategoryCoupons (order_by: [String!]): [SubSubCategoryCoupon]
}

input SSubCategoryInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    ssub_category_name : String
    images : String
    sub_category_id : UUID
    subCategory : SubCategoryInput
    products : [ProductInput]
    subSubCategoryCoupons : [SubSubCategoryCouponInput]
}

        extend type Query {
          getSSubCategory(id: UUID!): SSubCategory!
                  listSSubCategory(page: Int, limit: Int, order_by: [String]): [SSubCategory]!
        }
        extend type Mutation {
          addSSubCategory(row: SSubCategoryInput!): SSubCategory!
          addMultipleSSubCategory(rows: [SSubCategoryInput!]): [SSubCategory]!
          updateSSubCategory(id: UUID!, input: SSubCategoryInput!): SSubCategory!
          deleteSSubCategory: SSubCategory!
        }
        
type Product {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    product_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    product_description (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    sku_number (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    images (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    brand (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    quantity (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    unit (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    product_tag (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    sub_category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    ssub_category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    inter_state_tax_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    intra_state_tax_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    hsn_or_sac (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    tags (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_synced (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    type (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    item_id_zoho (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    price (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    zoho_tax_type (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    zoho_inter_state_tax_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    zoho_intra_state_tax_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    category: Category
    sub_category: SubCategory
    ssub_category: SSubCategory
    taxSlab: Tax
    taxSlabs: Tax
    warehouseProducts (order_by: [String!]): [WarehouseProduct]
}

input ProductInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    product_name : String
    product_description : String
    sku_number : String
    images : String
    brand : String
    quantity : Int
    unit : String
    product_tag : String
    category_id : UUID
    sub_category_id : UUID
    ssub_category_id : UUID
    inter_state_tax_id : UUID
    intra_state_tax_id : UUID
    hsn_or_sac : String
    status : String
    tags : String
    is_synced : Int
    type : String
    item_id_zoho : String
    price : String
    zoho_tax_type : Int
    zoho_inter_state_tax_id : String
    zoho_intra_state_tax_id : String
    category : CategoryInput
    sub_category : SubCategoryInput
    ssub_category : SSubCategoryInput
    taxSlab : TaxInput
    taxSlabs : TaxInput
    warehouseProducts : [WarehouseProductInput]
}

        extend type Query {
          getProduct(id: UUID!): Product!
                  listProduct(page: Int, limit: Int, order_by: [String]): [Product]!
        }
        extend type Mutation {
          addProduct(row: ProductInput!): Product!
          addMultipleProduct(rows: [ProductInput!]): [Product]!
          updateProduct(id: UUID!, input: ProductInput!): Product!
          deleteProduct: Product!
        }
        
type WarehouseProduct {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    product_warehouse_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    product_warehouse_description (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    product_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    quantity (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    minimum_order_quantity (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    maximum_order_quantity (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    increment_factor (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    start_value (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    end_value (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    markup (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    percentage (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    is_sale (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    unit (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_never_out_of_stock (bool: Boolean): Boolean
    is_exempted_coupon (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    user_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    product: Product
    warehouse: Warehouse
    user: User
    collectionWarehouseProducts (order_by: [String!]): [CollectionWarehouseProduct]
    productCoupons (order_by: [String!]): [ProductCoupon]
}

input WarehouseProductInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    product_warehouse_name : String
    product_warehouse_description : String
    product_id : UUID
    warehouse_id : UUID
    quantity : Int
    minimum_order_quantity : Int
    maximum_order_quantity : Int
    increment_factor : Int
    start_value : Int
    end_value : Int
    markup : Int
    percentage : Float
    is_sale : Int
    unit : String
    is_never_out_of_stock : Boolean
    is_exempted_coupon : Int
    user_id : UUID
    product : ProductInput
    warehouse : WarehouseInput
    user : UserInput
    collectionWarehouseProducts : [CollectionWarehouseProductInput]
    productCoupons : [ProductCouponInput]
}

        extend type Query {
          getWarehouseProduct(id: UUID!): WarehouseProduct!
                  listWarehouseProduct(page: Int, limit: Int, order_by: [String]): [WarehouseProduct]!
        }
        extend type Mutation {
          addWarehouseProduct(row: WarehouseProductInput!): WarehouseProduct!
          addMultipleWarehouseProduct(rows: [WarehouseProductInput!]): [WarehouseProduct]!
          updateWarehouseProduct(id: UUID!, input: WarehouseProductInput!): WarehouseProduct!
          deleteWarehouseProduct: WarehouseProduct!
        }
        
type CollectionReference {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    product_collection_status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    collection_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    collection_type (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    warehouse_products (order_by: [String!]): [CollectionWarehouseProduct]
    warehouse: Warehouse
    collectionCoupons (order_by: [String!]): [CollectionCoupon]
}

input CollectionReferenceInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    product_collection_status : String
    collection_name : String
    collection_type : String
    warehouse_id : UUID
    warehouse_products : [CollectionWarehouseProductInput]
    warehouse : WarehouseInput
    collectionCoupons : [CollectionCouponInput]
}

        extend type Query {
          getCollectionReference(id: UUID!): CollectionReference!
                  listCollectionReference(page: Int, limit: Int, order_by: [String]): [CollectionReference]!
        }
        extend type Mutation {
          addCollectionReference(row: CollectionReferenceInput!): CollectionReference!
          addMultipleCollectionReference(rows: [CollectionReferenceInput!]): [CollectionReference]!
          updateCollectionReference(id: UUID!, input: CollectionReferenceInput!): CollectionReference!
          deleteCollectionReference: CollectionReference!
        }
        
type Warehouse {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    warehouse_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    warehouse_location (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    zoho_warehouse_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    pincode_group_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    order_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    pincodeGroup: PincodeGroup
    collections (order_by: [String!]): [CollectionReference]
    products (order_by: [String!]): [WarehouseProduct]
    collectionWarehouseProducts (order_by: [String!]): [CollectionWarehouseProduct]
    cart (order_by: [String!]): [Cart]
    shipping (order_by: [String!]): [Shipping]
    order: Order
}

input WarehouseInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    warehouse_name : String
    warehouse_location : String
    zoho_warehouse_id : String
    pincode_group_id : UUID
    order_id : UUID
    pincodeGroup : PincodeGroupInput
    collections : [CollectionReferenceInput]
    products : [WarehouseProductInput]
    collectionWarehouseProducts : [CollectionWarehouseProductInput]
    cart : [CartInput]
    shipping : [ShippingInput]
    order : OrderInput
}

        extend type Query {
          getWarehouse(id: UUID!): Warehouse!
                  listWarehouse(page: Int, limit: Int, order_by: [String]): [Warehouse]!
        }
        extend type Mutation {
          addWarehouse(row: WarehouseInput!): Warehouse!
          addMultipleWarehouse(rows: [WarehouseInput!]): [Warehouse]!
          updateWarehouse(id: UUID!, input: WarehouseInput!): Warehouse!
          deleteWarehouse: Warehouse!
        }
        
type CollectionWarehouseProduct {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    warehouse_product_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    collection_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    warehouseProduct: WarehouseProduct
    collection: CollectionReference
    warehouse: Warehouse
}

input CollectionWarehouseProductInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    warehouse_product_id : UUID
    collection_id : UUID
    warehouse_id : UUID
    warehouseProduct : WarehouseProductInput
    collection : CollectionReferenceInput
    warehouse : WarehouseInput
}

        extend type Query {
          getCollectionWarehouseProduct(id: UUID!): CollectionWarehouseProduct!
                  listCollectionWarehouseProduct(page: Int, limit: Int, order_by: [String]): [CollectionWarehouseProduct]!
        }
        extend type Mutation {
          addCollectionWarehouseProduct(row: CollectionWarehouseProductInput!): CollectionWarehouseProduct!
          addMultipleCollectionWarehouseProduct(rows: [CollectionWarehouseProductInput!]): [CollectionWarehouseProduct]!
          updateCollectionWarehouseProduct(id: UUID!, input: CollectionWarehouseProductInput!): CollectionWarehouseProduct!
          deleteCollectionWarehouseProduct: CollectionWarehouseProduct!
        }
        
type BasePricing {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    product_warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    slab_price (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    min_qty (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    total_quantity_for_sale (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    total_quantity_user (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    is_sale (bool: Boolean): Boolean
    is_default (bool: Boolean): Boolean
    is_active (bool: Boolean): Boolean
    productWarehouse: WarehouseProduct
}

input BasePricingInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    product_warehouse_id : UUID
    slab_price : Float
    min_qty : Int
    total_quantity_for_sale : Int
    total_quantity_user : Int
    is_sale : Boolean
    is_default : Boolean
    is_active : Boolean
    productWarehouse : WarehouseProductInput
}

        extend type Query {
          getBasePricing(id: UUID!): BasePricing!
                  listBasePricing(page: Int, limit: Int, order_by: [String]): [BasePricing]!
        }
        extend type Mutation {
          addBasePricing(row: BasePricingInput!): BasePricing!
          addMultipleBasePricing(rows: [BasePricingInput!]): [BasePricing]!
          updateBasePricing(id: UUID!, input: BasePricingInput!): BasePricing!
          deleteBasePricing: BasePricing!
        }
        
type UserSpecificPricing {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    product_warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    user_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    slab_price (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    min_qty (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    is_active (bool: Boolean): Boolean
    sale_start (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    sale_ended (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    productWarehouse: WarehouseProduct
    user: User
    warehouse: Warehouse
}

input UserSpecificPricingInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    product_warehouse_id : UUID
    user_id : UUID
    warehouse_id : UUID
    slab_price : Float
    min_qty : Int
    is_active : Boolean
    sale_start : DateTime
    sale_ended : DateTime
    productWarehouse : WarehouseProductInput
    user : UserInput
    warehouse : WarehouseInput
}

        extend type Query {
          getUserSpecificPricing(id: UUID!): UserSpecificPricing!
                  listUserSpecificPricing(page: Int, limit: Int, order_by: [String]): [UserSpecificPricing]!
        }
        extend type Mutation {
          addUserSpecificPricing(row: UserSpecificPricingInput!): UserSpecificPricing!
          addMultipleUserSpecificPricing(rows: [UserSpecificPricingInput!]): [UserSpecificPricing]!
          updateUserSpecificPricing(id: UUID!, input: UserSpecificPricingInput!): UserSpecificPricing!
          deleteUserSpecificPricing: UserSpecificPricing!
        }
        
type PincodeGroup {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    is_gst_applicable (bool: Boolean): Boolean
    pincodes (order_by: [String!]): [Pincode]
    warehouses (order_by: [String!]): [Warehouse]
    shipping (order_by: [String!]): [Shipping]
}

input PincodeGroupInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    is_gst_applicable : Boolean
    pincodes : [PincodeInput]
    warehouses : [WarehouseInput]
    shipping : [ShippingInput]
}

        extend type Query {
          getPincodeGroup(id: UUID!): PincodeGroup!
                  listPincodeGroup(page: Int, limit: Int, order_by: [String]): [PincodeGroup]!
        }
        extend type Mutation {
          addPincodeGroup(row: PincodeGroupInput!): PincodeGroup!
          addMultiplePincodeGroup(rows: [PincodeGroupInput!]): [PincodeGroup]!
          updatePincodeGroup(id: UUID!, input: PincodeGroupInput!): PincodeGroup!
          deletePincodeGroup: PincodeGroup!
        }
        
type Pincode {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    group_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    group: PincodeGroup
}

input PincodeInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    group_id : UUID
    group : PincodeGroupInput
}

        extend type Query {
          getPincode(id: UUID!): Pincode!
                  listPincode(page: Int, limit: Int, order_by: [String]): [Pincode]!
        }
        extend type Mutation {
          addPincode(row: PincodeInput!): Pincode!
          addMultiplePincode(rows: [PincodeInput!]): [Pincode]!
          updatePincode(id: UUID!, input: PincodeInput!): Pincode!
          deletePincode: Pincode!
        }
        
type Banner {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    banner_media_link (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_active (bool: Boolean): Boolean
    banner_type (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    expiry_time (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
}

input BannerInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    name : String
    banner_media_link : String
    is_active : Boolean
    banner_type : String
    expiry_time : DateTime
}

        extend type Query {
          getBanner(id: UUID!): Banner!
                  listBanner(page: Int, limit: Int, order_by: [String]): [Banner]!
        }
        extend type Mutation {
          addBanner(row: BannerInput!): Banner!
          addMultipleBanner(rows: [BannerInput!]): [Banner]!
          updateBanner(id: UUID!, input: BannerInput!): Banner!
          deleteBanner: Banner!
        }
        
type UserCoupon {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    coupon_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    customer_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    user_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    coupon: Coupon
    user: User
}

input UserCouponInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    coupon_id : UUID
    customer_id : UUID
    user_id : UUID
    coupon : CouponInput
    user : UserInput
}

        extend type Query {
          getUserCoupon(id: UUID!): UserCoupon!
                  listUserCoupon(page: Int, limit: Int, order_by: [String]): [UserCoupon]!
        }
        extend type Mutation {
          addUserCoupon(row: UserCouponInput!): UserCoupon!
          addMultipleUserCoupon(rows: [UserCouponInput!]): [UserCoupon]!
          updateUserCoupon(id: UUID!, input: UserCouponInput!): UserCoupon!
          deleteUserCoupon: UserCoupon!
        }
        
type CollectionCoupon {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    coupon_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    collection_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    coupon: Coupon
    collectionReference: CollectionReference
}

input CollectionCouponInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    coupon_id : UUID
    collection_id : UUID
    coupon : CouponInput
    collectionReference : CollectionReferenceInput
}

        extend type Query {
          getCollectionCoupon(id: UUID!): CollectionCoupon!
                  listCollectionCoupon(page: Int, limit: Int, order_by: [String]): [CollectionCoupon]!
        }
        extend type Mutation {
          addCollectionCoupon(row: CollectionCouponInput!): CollectionCoupon!
          addMultipleCollectionCoupon(rows: [CollectionCouponInput!]): [CollectionCoupon]!
          updateCollectionCoupon(id: UUID!, input: CollectionCouponInput!): CollectionCoupon!
          deleteCollectionCoupon: CollectionCoupon!
        }
        
type SubCategoryCoupon {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    coupon_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    sub_category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    coupon: Coupon
    subCategory: SubCategory
}

input SubCategoryCouponInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    coupon_id : UUID
    sub_category_id : UUID
    coupon : CouponInput
    subCategory : SubCategoryInput
}

        extend type Query {
          getSubCategoryCoupon(id: UUID!): SubCategoryCoupon!
                  listSubCategoryCoupon(page: Int, limit: Int, order_by: [String]): [SubCategoryCoupon]!
        }
        extend type Mutation {
          addSubCategoryCoupon(row: SubCategoryCouponInput!): SubCategoryCoupon!
          addMultipleSubCategoryCoupon(rows: [SubCategoryCouponInput!]): [SubCategoryCoupon]!
          updateSubCategoryCoupon(id: UUID!, input: SubCategoryCouponInput!): SubCategoryCoupon!
          deleteSubCategoryCoupon: SubCategoryCoupon!
        }
        
type CategoryCoupon {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    coupon_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    coupon: Coupon
    category: Category
}

input CategoryCouponInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    coupon_id : UUID
    category_id : UUID
    coupon : CouponInput
    category : CategoryInput
}

        extend type Query {
          getCategoryCoupon(id: UUID!): CategoryCoupon!
                  listCategoryCoupon(page: Int, limit: Int, order_by: [String]): [CategoryCoupon]!
        }
        extend type Mutation {
          addCategoryCoupon(row: CategoryCouponInput!): CategoryCoupon!
          addMultipleCategoryCoupon(rows: [CategoryCouponInput!]): [CategoryCoupon]!
          updateCategoryCoupon(id: UUID!, input: CategoryCouponInput!): CategoryCoupon!
          deleteCategoryCoupon: CategoryCoupon!
        }
        
type ProductCoupon {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    coupon_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    warehouse_product_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    coupon: Coupon
    warehouseProduct: WarehouseProduct
}

input ProductCouponInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    coupon_id : UUID
    warehouse_product_id : UUID
    coupon : CouponInput
    warehouseProduct : WarehouseProductInput
}

        extend type Query {
          getProductCoupon(id: UUID!): ProductCoupon!
                  listProductCoupon(page: Int, limit: Int, order_by: [String]): [ProductCoupon]!
        }
        extend type Mutation {
          addProductCoupon(row: ProductCouponInput!): ProductCoupon!
          addMultipleProductCoupon(rows: [ProductCouponInput!]): [ProductCoupon]!
          updateProductCoupon(id: UUID!, input: ProductCouponInput!): ProductCoupon!
          deleteProductCoupon: ProductCoupon!
        }
        
type SubSubCategoryCoupon {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    coupon_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    sub_sub_category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    coupon: Coupon
    ssubCategory: SSubCategory
}

input SubSubCategoryCouponInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    coupon_id : UUID
    sub_sub_category_id : UUID
    coupon : CouponInput
    ssubCategory : SSubCategoryInput
}

        extend type Query {
          getSubSubCategoryCoupon(id: UUID!): SubSubCategoryCoupon!
                  listSubSubCategoryCoupon(page: Int, limit: Int, order_by: [String]): [SubSubCategoryCoupon]!
        }
        extend type Mutation {
          addSubSubCategoryCoupon(row: SubSubCategoryCouponInput!): SubSubCategoryCoupon!
          addMultipleSubSubCategoryCoupon(rows: [SubSubCategoryCouponInput!]): [SubSubCategoryCoupon]!
          updateSubSubCategoryCoupon(id: UUID!, input: SubSubCategoryCouponInput!): SubSubCategoryCoupon!
          deleteSubSubCategoryCoupon: SubSubCategoryCoupon!
        }
        
type Coupon {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    code (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    coupon_type (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    coupoun_value (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    expiry_date (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    counter (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    max_usage (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    daily_limit (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    is_active (bool: Boolean): Boolean
    coupon_category (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    productCoupons (order_by: [String!]): [ProductCoupon]
    collectionCoupons (order_by: [String!]): [CollectionCoupon]
    categoryCoupons (order_by: [String!]): [CategoryCoupon]
    subCategoryCoupons (order_by: [String!]): [SubCategoryCoupon]
    subSubCategoryCoupons (order_by: [String!]): [SubSubCategoryCoupon]
    userCoupons (order_by: [String!]): [UserCoupon]
}

input CouponInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    name : String
    code : String
    coupon_type : Int
    coupoun_value : Float
    expiry_date : DateTime
    counter : Int
    max_usage : Int
    daily_limit : Int
    is_active : Boolean
    coupon_category : Int
    productCoupons : [ProductCouponInput]
    collectionCoupons : [CollectionCouponInput]
    categoryCoupons : [CategoryCouponInput]
    subCategoryCoupons : [SubCategoryCouponInput]
    subSubCategoryCoupons : [SubSubCategoryCouponInput]
    userCoupons : [UserCouponInput]
}

        extend type Query {
          getCoupon(id: UUID!): Coupon!
                  listCoupon(page: Int, limit: Int, order_by: [String]): [Coupon]!
        }
        extend type Mutation {
          addCoupon(row: CouponInput!): Coupon!
          addMultipleCoupon(rows: [CouponInput!]): [Coupon]!
          updateCoupon(id: UUID!, input: CouponInput!): Coupon!
          deleteCoupon: Coupon!
        }
        
type DefaultShipping {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    order_value (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    amount (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
}

input DefaultShippingInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    order_value : Float
    amount : Float
}

        extend type Query {
          getDefaultShipping(id: UUID!): DefaultShipping!
                  listDefaultShipping(page: Int, limit: Int, order_by: [String]): [DefaultShipping]!
        }
        extend type Mutation {
          addDefaultShipping(row: DefaultShippingInput!): DefaultShipping!
          addMultipleDefaultShipping(rows: [DefaultShippingInput!]): [DefaultShipping]!
          updateDefaultShipping(id: UUID!, input: DefaultShippingInput!): DefaultShipping!
          deleteDefaultShipping: DefaultShipping!
        }
        
type Shipping {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    order_value (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    amount (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    pincode_group_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    warehouse: Warehouse
    pincodeGroup: PincodeGroup
}

input ShippingInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    order_value : Float
    amount : Float
    warehouse_id : UUID
    pincode_group_id : UUID
    warehouse : WarehouseInput
    pincodeGroup : PincodeGroupInput
}

        extend type Query {
          getShipping(id: UUID!): Shipping!
                  listShipping(page: Int, limit: Int, order_by: [String]): [Shipping]!
        }
        extend type Mutation {
          addShipping(row: ShippingInput!): Shipping!
          addMultipleShipping(rows: [ShippingInput!]): [Shipping]!
          updateShipping(id: UUID!, input: ShippingInput!): Shipping!
          deleteShipping: Shipping!
        }
        
type Slot {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    slot_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
}

input SlotInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    slot_name : String
}

        extend type Query {
          getSlot(id: UUID!): Slot!
                  listSlot(page: Int, limit: Int, order_by: [String]): [Slot]!
        }
        extend type Mutation {
          addSlot(row: SlotInput!): Slot!
          addMultipleSlot(rows: [SlotInput!]): [Slot]!
          updateSlot(id: UUID!, input: SlotInput!): Slot!
          deleteSlot: Slot!
        }
        
type Tax {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    tax_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    tax_type (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    tax_rate (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    cgst (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    sgst (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    igst (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    cess (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    zoho_tax_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
}

input TaxInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    tax_name : String
    tax_type : Float
    tax_rate : Float
    cgst : Float
    sgst : Float
    igst : Float
    cess : Float
    zoho_tax_id : String
}

        extend type Query {
          getTax(id: UUID!): Tax!
                  listTax(page: Int, limit: Int, order_by: [String]): [Tax]!
        }
        extend type Mutation {
          addTax(row: TaxInput!): Tax!
          addMultipleTax(rows: [TaxInput!]): [Tax]!
          updateTax(id: UUID!, input: TaxInput!): Tax!
          deleteTax: Tax!
        }
        
type CartInlineItem {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    product_warehouse_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    product_warehouse_description (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    final_price (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    total_price (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    item_level_discount (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    quantity (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    unit (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_complimentary (bool: Boolean): Boolean
    complimentary_message (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_discount_exempted (bool: Boolean): Boolean
    is_tax_inclusive (bool: Boolean): Boolean
    group_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    cancellation_message (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    combo_id (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    image_link (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    invoice_number (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    calc_total_agg_tax (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_total_agg_tax_percent (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_item_tax (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_item_tax_percent (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_add_on_total (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_item_discount_percentage (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    saved_category_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    saved_parent_category_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    category_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    subcategory_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    ssubcategory_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    collection_reference_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    cart_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    item_id_zoho (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    product_warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    productWarehouse: WarehouseProduct
    category: Category
    subcategory: SubCategory
    ssubcategory: SSubCategory
    collectionReference: CollectionReference
    cart: Cart
}

input CartInlineItemInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    product_warehouse_name : String
    product_warehouse_description : String
    warehouse_id : UUID
    final_price : Float
    total_price : Float
    item_level_discount : Float
    quantity : Int
    unit : String
    is_complimentary : Boolean
    complimentary_message : String
    is_discount_exempted : Boolean
    is_tax_inclusive : Boolean
    group_name : String
    cancellation_message : String
    combo_id : Int
    image_link : String
    invoice_number : Int
    calc_total_agg_tax : Float
    calc_total_agg_tax_percent : Float
    calc_item_tax : Float
    calc_item_tax_percent : Float
    calc_add_on_total : Float
    calc_item_discount_percentage : Float
    saved_category_name : String
    saved_parent_category_name : String
    category_id : UUID
    subcategory_id : UUID
    ssubcategory_id : UUID
    collection_reference_id : UUID
    cart_id : UUID
    item_id_zoho : String
    product_warehouse_id : UUID
    productWarehouse : WarehouseProductInput
    category : CategoryInput
    subcategory : SubCategoryInput
    ssubcategory : SSubCategoryInput
    collectionReference : CollectionReferenceInput
    cart : CartInput
}

        extend type Query {
          getCartInlineItem(id: UUID!): CartInlineItem!
                  listCartInlineItem(page: Int, limit: Int, order_by: [String]): [CartInlineItem]!
        }
        extend type Mutation {
          addCartInlineItem(row: CartInlineItemInput!): CartInlineItem!
          addMultipleCartInlineItem(rows: [CartInlineItemInput!]): [CartInlineItem]!
          updateCartInlineItem(id: UUID!, input: CartInlineItemInput!): CartInlineItem!
          deleteCartInlineItem: CartInlineItem!
        }
        
type TaxBreakUp {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    tax_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    tax_value (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    tax_amount (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    cart_inline_item_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    CartInlineItem: CartInlineItem
}

input TaxBreakUpInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    tax_name : String
    tax_value : Float
    tax_amount : Float
    cart_inline_item_id : UUID
    CartInlineItem : CartInlineItemInput
}

        extend type Query {
          getTaxBreakUp(id: UUID!): TaxBreakUp!
                  listTaxBreakUp(page: Int, limit: Int, order_by: [String]): [TaxBreakUp]!
        }
        extend type Mutation {
          addTaxBreakUp(row: TaxBreakUpInput!): TaxBreakUp!
          addMultipleTaxBreakUp(rows: [TaxBreakUpInput!]): [TaxBreakUp]!
          updateTaxBreakUp(id: UUID!, input: TaxBreakUpInput!): TaxBreakUp!
          deleteTaxBreakUp: TaxBreakUp!
        }
        
type User {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    email (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    first_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    last_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_admin (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    is_active (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    mobile (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    gst_no (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    gst_treatment (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    businesses (order_by: [String!]): [Business]
    userWallet: UserWallet
    addresses (order_by: [String!]): [Address]
    carts (order_by: [String!]): [Cart]
    userCoupons (order_by: [String!]): [UserCoupon]
}

input UserInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    email : String
    first_name : String
    last_name : String
    is_admin : Int
    is_active : Int
    mobile : String
    gst_no : UUID
    gst_treatment : String
    businesses : [BusinessInput]
    userWallet : UserWalletInput
    addresses : [AddressInput]
    carts : [CartInput]
    userCoupons : [UserCouponInput]
}

        extend type Query {
          getUser(id: UUID!): User!
                  listUser(page: Int, limit: Int, order_by: [String]): [User]!
        }
        extend type Mutation {
          addUser(row: UserInput!): User!
          addMultipleUser(rows: [UserInput!]): [User]!
          updateUser(id: UUID!, input: UserInput!): User!
          deleteUser: User!
        }
        
type Outlet {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    address_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    outlet_image (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    outlet_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    fssai (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    business_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    coupon_applicable (bool: Boolean): Boolean
    shipping_address_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    zoho_shipping_address_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    billing_address_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    zoho_billing_address_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    zoho_contact_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    attempts_to_create_on_zoho (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    sales_poc (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_zoho_created (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    business: Business
    shippingAddress: Address
    billingAddress: Address
    address: Address
    cuisines (order_by: [String!]): [Cuisine]
    cart: Cart
}

input OutletInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    address_id : UUID
    outlet_image : String
    outlet_name : String
    fssai : String
    name : String
    business_id : UUID
    coupon_applicable : Boolean
    shipping_address_id : UUID
    zoho_shipping_address_id : String
    billing_address_id : UUID
    zoho_billing_address_id : String
    zoho_contact_id : String
    attempts_to_create_on_zoho : Int
    sales_poc : String
    is_zoho_created : Int
    business : BusinessInput
    shippingAddress : AddressInput
    billingAddress : AddressInput
    address : AddressInput
    cuisines : [CuisineInput]
    cart : CartInput
}

        extend type Query {
          getOutlet(id: UUID!): Outlet!
                  listOutlet(page: Int, limit: Int, order_by: [String]): [Outlet]!
        }
        extend type Mutation {
          addOutlet(row: OutletInput!): Outlet!
          addMultipleOutlet(rows: [OutletInput!]): [Outlet]!
          updateOutlet(id: UUID!, input: OutletInput!): Outlet!
          deleteOutlet: Outlet!
        }
        
type Business {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    business_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    business_website (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    user_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    user: User
    outlets (order_by: [String!]): [Outlet]
}

input BusinessInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    business_name : String
    business_website : String
    user_id : UUID
    user : UserInput
    outlets : [OutletInput]
}

        extend type Query {
          getBusiness(id: UUID!): Business!
                  listBusiness(page: Int, limit: Int, order_by: [String]): [Business]!
        }
        extend type Mutation {
          addBusiness(row: BusinessInput!): Business!
          addMultipleBusiness(rows: [BusinessInput!]): [Business]!
          updateBusiness(id: UUID!, input: BusinessInput!): Business!
          deleteBusiness: Business!
        }
        
type Address {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    address_line1 (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    address_line2 (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    address_line3 (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    postalcode (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    city (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    state (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    country (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    latitude (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    longitude (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    user_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    user: User
    shippingOutlet: Outlet
    billingOutlet: Outlet
}

input AddressInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    address_line1 : String
    address_line2 : String
    address_line3 : String
    postalcode : String
    city : String
    state : String
    country : String
    latitude : String
    longitude : String
    user_id : UUID
    user : UserInput
    shippingOutlet : OutletInput
    billingOutlet : OutletInput
}

        extend type Query {
          getAddress(id: UUID!): Address!
                  listAddress(page: Int, limit: Int, order_by: [String]): [Address]!
        }
        extend type Mutation {
          addAddress(row: AddressInput!): Address!
          addMultipleAddress(rows: [AddressInput!]): [Address]!
          updateAddress(id: UUID!, input: AddressInput!): Address!
          deleteAddress: Address!
        }
        
type OrderTimeline {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    order_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    order: Order
}

input OrderTimelineInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    status : String
    order_id : UUID
    order : OrderInput
}

        extend type Query {
          getOrderTimeline(id: UUID!): OrderTimeline!
                  listOrderTimeline(page: Int, limit: Int, order_by: [String]): [OrderTimeline]!
        }
        extend type Mutation {
          addOrderTimeline(row: OrderTimelineInput!): OrderTimeline!
          addMultipleOrderTimeline(rows: [OrderTimelineInput!]): [OrderTimeline]!
          updateOrderTimeline(id: UUID!, input: OrderTimelineInput!): OrderTimeline!
          deleteOrderTimeline: OrderTimeline!
        }
        
type Order {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    user_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    order_status_user (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    total_amount (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    payment_mode (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    source (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    referrer (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    delivery_instructions (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    special_instructions (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    discount_comment (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_settled (bool: Boolean): Boolean
    is_cancelled (bool: Boolean): Boolean
    meta_data : JSON
    calc_total_tax (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_service_charge (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_service_charge_tax (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_delivery_charge_tax (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_packaging_charge_tax (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_total_item_discount (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_total_tcs (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    complimentary (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    tip (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    cash_denomination : JSON
    address_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    is_zoho_created (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    attempts_to_create_on_zoho (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    zoho_contact_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    zoho_status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    zoho_salesorder_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    zoho_salesorder_number (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    paid_status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    order_status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    invoiced_status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    shipped_status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    shipment_date (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    user: User
    orderItems (order_by: [String!]): [Item]
    address: Address
    statusTimeline (order_by: [String!]): [OrderTimeline]
    packages (order_by: [String!]): [Package]
    invoices (order_by: [String!]): [Invoice]
    warehouse: Warehouse
}

input OrderInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    user_id : UUID
    order_status_user : String
    total_amount : Float
    payment_mode : String
    source : String
    referrer : String
    delivery_instructions : String
    special_instructions : String
    discount_comment : String
    is_settled : Boolean
    is_cancelled : Boolean
    meta_data : JSON
    calc_total_tax : Float
    calc_service_charge : Float
    calc_service_charge_tax : Float
    calc_delivery_charge_tax : Float
    calc_packaging_charge_tax : Float
    calc_total_item_discount : Float
    calc_total_tcs : Float
    complimentary : Float
    tip : Float
    cash_denomination : JSON
    address_id : UUID
    is_zoho_created : Int
    attempts_to_create_on_zoho : Int
    zoho_contact_id : String
    warehouse_id : UUID
    zoho_status : String
    zoho_salesorder_id : String
    zoho_salesorder_number : String
    paid_status : String
    order_status : String
    invoiced_status : String
    shipped_status : String
    status : String
    shipment_date : String
    user : UserInput
    orderItems : [ItemInput]
    address : AddressInput
    statusTimeline : [OrderTimelineInput]
    packages : [PackageInput]
    invoices : [InvoiceInput]
    warehouse : WarehouseInput
}

        extend type Query {
          getOrder(id: UUID!): Order!
                  listOrder(page: Int, limit: Int, order_by: [String]): [Order]!
        }
        extend type Mutation {
          addOrder(row: OrderInput!): Order!
          addMultipleOrder(rows: [OrderInput!]): [Order]!
          updateOrder(id: UUID!, input: OrderInput!): Order!
          deleteOrder: Order!
        }
        
type Package {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    package_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    package_number (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    shipment_status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    quantity (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    carrier (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    tracking_number (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    shipment_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    shipment_number (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    shipment_date (greaterThan: Date, lesserThan: Date, greaterEqual: Date, lesserEqual: Date, isNull: Boolean): Date
    delivery_method (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    delivery_guarantee (bool: Boolean): Boolean
    service (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    order_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    order: Order
}

input PackageInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    package_id : String
    package_number : String
    status : String
    shipment_status : String
    quantity : Int
    carrier : String
    tracking_number : String
    shipment_id : String
    shipment_number : String
    shipment_date : Date
    delivery_method : String
    delivery_guarantee : Boolean
    service : String
    order_id : UUID
    order : OrderInput
}

        extend type Query {
          getPackage(id: UUID!): Package!
                  listPackage(page: Int, limit: Int, order_by: [String]): [Package]!
        }
        extend type Mutation {
          addPackage(row: PackageInput!): Package!
          addMultiplePackage(rows: [PackageInput!]): [Package]!
          updatePackage(id: UUID!, input: PackageInput!): Package!
          deletePackage: Package!
        }
        
type Invoice {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    status (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    invoice_number (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    invoice_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    type (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    order_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    total_amount (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    salesorder_id (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    order: Order
}

input InvoiceInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    status : String
    invoice_number : String
    invoice_id : String
    type : String
    order_id : UUID
    total_amount : Float
    salesorder_id : String
    order : OrderInput
}

        extend type Query {
          getInvoice(id: UUID!): Invoice!
                  listInvoice(page: Int, limit: Int, order_by: [String]): [Invoice]!
        }
        extend type Mutation {
          addInvoice(row: InvoiceInput!): Invoice!
          addMultipleInvoice(rows: [InvoiceInput!]): [Invoice]!
          updateInvoice(id: UUID!, input: InvoiceInput!): Invoice!
          deleteInvoice: Invoice!
        }
        
type Item {
    id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    created_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    updated_at (greaterThan: DateTime, lesserThan: DateTime, greaterEqual: DateTime, lesserEqual: DateTime, isNull: Boolean): DateTime
    product_warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    order_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    product_warehouse_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    product_warehouse_description (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    warehouse_id (equal: UUID, notEqual: UUID, in: [UUID], notIn: [UUID], isNull: Boolean): UUID
    unit (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    final_price (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    total_price (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    item_level_discount (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    quantity (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    is_complimentary (bool: Boolean): Boolean
    complimentary_message (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    is_discount_exempted (bool: Boolean): Boolean
    is_tax_inclusive (bool: Boolean): Boolean
    group_name (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    cancellation_message (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    combo_id (equal: Int, notEqual: Int, in: [Int], notIn: [Int], greaterThan: Int, lesserThan: Int, greaterEqual: Int, lesserEqual: Int, isNull: Boolean): Int
    image_link (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    calc_total_agg_tax (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_total_agg_tax_percent (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_item_tax (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_item_tax_percent (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_add_on_total (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    calc_item_discount_percentage (equal: Float, notEqual: Float, in: [Float], notIn: [Float], greaterThan: Float, lesserThan: Float, greaterEqual: Float, lesserEqual: Float, isNull: Boolean): Float
    item_id_zoho (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    quantity_delivered (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    quantity_backordered (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    quantity_invoiced (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    quantity_packed (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    item_sub_total (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    quantity_shipped (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    quantity_returned (equal: String, notEqual: String, in: [String], notIn: [String], contains: String, startsWith: String, isNull: Boolean): String
    productWarehouse: WarehouseProduct
    order: Order
}

input ItemInput {
    id : UUID
    created_at : DateTime
    updated_at : DateTime
    product_warehouse_id : UUID
    order_id : UUID
    product_warehouse_name : String
    product_warehouse_description : String
    warehouse_id : UUID
    unit : String
    final_price : Float
    total_price : Float
    item_level_discount : Float
    quantity : Float
    is_complimentary : Boolean
    complimentary_message : String
    is_discount_exempted : Boolean
    is_tax_inclusive : Boolean
    group_name : String
    cancellation_message : String
    combo_id : Int
    image_link : String
    calc_total_agg_tax : Float
    calc_total_agg_tax_percent : Float
    calc_item_tax : Float
    calc_item_tax_percent : Float
    calc_add_on_total : Float
    calc_item_discount_percentage : Float
    item_id_zoho : String
    quantity_delivered : String
    quantity_backordered : String
    quantity_invoiced : String
    quantity_packed : String
    item_sub_total : String
    quantity_shipped : String
    quantity_returned : String
    productWarehouse : WarehouseProductInput
    order : OrderInput
}

        extend type Query {
          getItem(id: UUID!): Item!
                  listItem(page: Int, limit: Int, order_by: [String]): [Item]!
        }
        extend type Mutation {
          addItem(row: ItemInput!): Item!
          addMultipleItem(rows: [ItemInput!]): [Item]!
          updateItem(id: UUID!, input: ItemInput!): Item!
          deleteItem: Item!
        }
        